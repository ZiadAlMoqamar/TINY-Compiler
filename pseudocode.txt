program -> stmt-seq

procedure program;

stmt-seq;

end program;
=====================
stmt-seq -> stmt{;stmt}

procedure stmt-seq
stmt;
while(token == ;)
match(;)
stmt;
end while;
end stmt-seq
stmt -> if-stmt | repeat-stmt | assign-stmt | read-stmt | write-stmt
=====================
procedure stmt;
case token of 
if:
    if-stmt;
repeat:
    repeat-stmt;
identifier:
    assign-stmt;
read:
    read-stmt;
write:
    write-stmt;
else error;
end case;
end stmt;
=====================
if-stmt -> if (exp) then stmt-seq [else stmt-seq] end

procedure if-stmt;
match(if);
exp;
match(then);
stmt-seq;
if(token == else)
    match(else);
    stmt-seq;
end if;
match(end);
end if-stmt;
=====================
repeat-stmt -> repeat stmt-seq until exp

procedure repeat-stmt;
match(repeat);
stmt-seq;
match(until);
exp;
end repeat-stmt;
=====================
assign-stmt -> identifier := exp

procedure assign-stmt;
match(identifier);
match(:=);
exp;

end assign-stmt;
=====================
read-stmt -> read identifier
=====================
write-stmt -> write exp
=====================
exp -> simple-exp [comparison-op simple-exp]
procedure exp;
simple-exp;
if(token == < || token == =)
match(comparison-op)
simple-exp;
end if;
end procedure exp;
=====================
comparison-op -> < | =
=====================
simple-exp -> term {addop term}
procedure simple-exp;
term;
while(token == + || token == -)
case token of:
+:
match(+)
term;
-:
match(-)
term;
end case
end while
end simple-exp
=====================
addop -> + | -
=====================
term -> factor {mulop factor}
=====================
mulop -> \* | /
=====================
factor -> (exp) | number | identifier
=====================
